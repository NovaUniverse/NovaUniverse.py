window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "novauniverse", "modulename": "novauniverse", "type": "module", "doc": "<p>\ud83d\udc32 Nova Universe - A modern API wrapper for the minecraft server Nova Universe written in Python.</p>\n\n<p>Copyright (C) 2022 - Dev Goldy</p>\n\n<hr />\n\n<p><a href=\"https://discord.gg/4gZSVJ7\"><img src=\"https://discordapp.com/api/guilds/692764975902752871/widget.png?style=shield\" alt=\"Discord Shield\" /></a>\n<a href=\"https://pypi.org/project/novauniverse/\"><img src=\"https://badge.fury.io/py/novauniverse.svg\" alt=\"PyPI version\" /></a>\n<a href=\"https://pypi.org/project/novauniverse/\" title=\"Supported python versions.\"><img src=\"https://img.shields.io/pypi/pyversions/GoldyBot?style=flat\" alt=\"Python Badge\" /></a>\n<a href=\"https://novauniversepy.devgoldy.me/\"><img src=\"https://img.shields.io/static/v1?label=docs&amp;message=Available&amp;color=light-green\" alt=\"Docs Badge\" /></a></p>\n\n<p align=\"center\">\n <img src=\"https://user-images.githubusercontent.com/66202304/147414615-4a410681-0e02-41e3-88cd-3d28d4bf6898.png\" width=\"500\" />\n</p>\n\n<h3 id=\"novauniversepy-a-modern-api-wrapper-for-the-minecraft-server-nova-universe-written-in-python\"><code>novauniverse.py</code> - A modern API wrapper for the minecraft server Nova Universe written in Python.</h3>\n\n<p align=\"right\">\n <img align=\"left\" src=\"https://raw.githubusercontent.com/NovaUniverse/NovaUniverse.py/v2/assets/logo.png\" width=\"180\" />\n\n <h2>What is Nova Universe.py?</h2>\n NovaUniverse.py is a API wrapper for the minecraft server <a href=\"https://novauniverse.net/\">Nova Universe</a> that allows you to access the Nova Universe <a href=\"https://novauniverse.net/api\">API</a> in a fast object oriented way in Python. One of the bonuses is that it was developed by one of the devs at NovaUniverse.\n</p>\n\n<p><br></p>\n\n<h2 id=\"installset-up\"><em>Install/Set Up</em></h2>\n\n<ol>\n<li><strong>Install package from pip.</strong></li>\n</ol>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\">#Windows/Linux</span>\n\npip install novauniverse\n</code></pre></div>\n\n<ol>\n<li><strong>That's It!</strong> - <em>Brief Example Below</em></li>\n</ol>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">novauniverse</span> <span class=\"kn\">import</span> <span class=\"n\">NovaClient</span><span class=\"p\">,</span> <span class=\"n\">Events</span><span class=\"p\">,</span> <span class=\"n\">NovaOnlinePlayer</span> \n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">NovaClient</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@client</span><span class=\"o\">.</span><span class=\"n\">on_event</span><span class=\"p\">(</span><span class=\"n\">Events</span><span class=\"o\">.</span><span class=\"n\">CLIENT_READY</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">client_is_ready</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Client is ready!&quot;</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@client</span><span class=\"o\">.</span><span class=\"n\">on_event</span><span class=\"p\">(</span><span class=\"n\">Events</span><span class=\"o\">.</span><span class=\"n\">PLAYER_JOIN</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">on_player_join</span><span class=\"p\">(</span><span class=\"n\">player</span><span class=\"p\">:</span><span class=\"n\">NovaOnlinePlayer</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">username</span><span class=\"si\">}</span><span class=\"s2\"> joined </span><span class=\"si\">{</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">server_name</span><span class=\"si\">}</span><span class=\"s2\">!&quot;</span><span class=\"p\">)</span>\n\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n</code></pre></div>\n"}, {"fullname": "novauniverse.api", "modulename": "novauniverse.api", "type": "module", "doc": "<p></p>\n"}, {"fullname": "novauniverse.api.NovaAPI", "modulename": "novauniverse.api", "qualname": "NovaAPI", "type": "class", "doc": "<p>The main class that handles all requests to <code>https://novauniverse.net/api/</code>.</p>\n"}, {"fullname": "novauniverse.api.NovaAPI.__init__", "modulename": "novauniverse.api", "qualname": "NovaAPI.__init__", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">endpoint</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "novauniverse.api.NovaAPI.is_online", "modulename": "novauniverse.api", "qualname": "NovaAPI.is_online", "type": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "novauniverse.api.NovaAPI.get", "modulename": "novauniverse.api", "qualname": "NovaAPI.get", "type": "function", "doc": "<p>Send a get request to that endpoint.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "novauniverse.api.endpoints", "modulename": "novauniverse.api.endpoints", "type": "module", "doc": "<p></p>\n"}, {"fullname": "novauniverse.api.endpoints.Endpoints", "modulename": "novauniverse.api.endpoints", "qualname": "Endpoints", "type": "class", "doc": "<p>Class containing all Nova Universe API endpoints.</p>\n"}, {"fullname": "novauniverse.api.endpoints.Endpoints.__init__", "modulename": "novauniverse.api.endpoints", "qualname": "Endpoints.__init__", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "novauniverse.api.endpoints.Endpoints.connectivity_check", "modulename": "novauniverse.api.endpoints", "qualname": "Endpoints.connectivity_check", "type": "variable", "doc": "<p></p>\n", "default_value": " = &#x27;https://novauniverse.net/api/connectivity_check&#x27;"}, {"fullname": "novauniverse.api.endpoints.Endpoints.NEWS_ALL", "modulename": "novauniverse.api.endpoints", "qualname": "Endpoints.NEWS_ALL", "type": "variable", "doc": "<p></p>\n", "default_value": " = &#x27;https://novauniverse.net/api/news/all&#x27;"}, {"fullname": "novauniverse.api.endpoints.Endpoints.NEWS_LATEST", "modulename": "novauniverse.api.endpoints", "qualname": "Endpoints.NEWS_LATEST", "type": "variable", "doc": "<p></p>\n", "default_value": " = &#x27;https://novauniverse.net/api/news/latest&#x27;"}, {"fullname": "novauniverse.api.endpoints.Endpoints.STATS_EXTENDED", "modulename": "novauniverse.api.endpoints", "qualname": "Endpoints.STATS_EXTENDED", "type": "variable", "doc": "<p></p>\n", "default_value": " = &#x27;https://novauniverse.net/api/stats/extended&#x27;"}, {"fullname": "novauniverse.api.endpoints.Endpoints.STATS_DISCORD", "modulename": "novauniverse.api.endpoints", "qualname": "Endpoints.STATS_DISCORD", "type": "variable", "doc": "<p></p>\n", "default_value": " = &#x27;https://novauniverse.net/api/stats/discord&#x27;"}, {"fullname": "novauniverse.api.endpoints.Endpoints.PLAYERS_ONLINE", "modulename": "novauniverse.api.endpoints", "qualname": "Endpoints.PLAYERS_ONLINE", "type": "variable", "doc": "<p></p>\n", "default_value": " = &#x27;https://novauniverse.net/api/players/online&#x27;"}, {"fullname": "novauniverse.api.errors", "modulename": "novauniverse.api.errors", "type": "module", "doc": "<p></p>\n"}, {"fullname": "novauniverse.api.errors.NovaAPIError", "modulename": "novauniverse.api.errors", "qualname": "NovaAPIError", "type": "class", "doc": "<p>Error raised when a known error occurs on the API.</p>\n", "bases": "novauniverse.errors.NovaError"}, {"fullname": "novauniverse.api.errors.NovaAPIError.__init__", "modulename": "novauniverse.api.errors", "qualname": "NovaAPIError.__init__", "type": "function", "doc": "<p>Raises this as a NovaUniverse.py exception.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "novauniverse.api.errors.NoEndpointPassed", "modulename": "novauniverse.api.errors", "qualname": "NoEndpointPassed", "type": "class", "doc": "<p>Raised when no endpoint is passed to NovaAPI.</p>\n", "bases": "NovaAPIError"}, {"fullname": "novauniverse.api.errors.NoEndpointPassed.__init__", "modulename": "novauniverse.api.errors", "qualname": "NoEndpointPassed.__init__", "type": "function", "doc": "<p>Raises this as a NovaUniverse.py exception.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "novauniverse.api.errors.FailedConnectivityCheck", "modulename": "novauniverse.api.errors", "qualname": "FailedConnectivityCheck", "type": "class", "doc": "<p>Raised when failed to connect to Nova Universe API.</p>\n", "bases": "NovaAPIError"}, {"fullname": "novauniverse.api.errors.FailedConnectivityCheck.__init__", "modulename": "novauniverse.api.errors", "qualname": "FailedConnectivityCheck.__init__", "type": "function", "doc": "<p>Raises this as a NovaUniverse.py exception.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "novauniverse.api.errors.UnSuccessfulOperation", "modulename": "novauniverse.api.errors", "qualname": "UnSuccessfulOperation", "type": "class", "doc": "<p>Raised when Nova Universe API returns unsuccessful operation.</p>\n", "bases": "NovaAPIError"}, {"fullname": "novauniverse.api.errors.UnSuccessfulOperation.__init__", "modulename": "novauniverse.api.errors", "qualname": "UnSuccessfulOperation.__init__", "type": "function", "doc": "<p>Raises this as a NovaUniverse.py exception.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "novauniverse.client", "modulename": "novauniverse.client", "type": "module", "doc": "<p></p>\n"}, {"fullname": "novauniverse.client.NovaClient", "modulename": "novauniverse.client", "qualname": "NovaClient", "type": "class", "doc": "<p>The NovaUniversePy client used for events.</p>\n"}, {"fullname": "novauniverse.client.NovaClient.__init__", "modulename": "novauniverse.client", "qualname": "NovaClient.__init__", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">debug</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "novauniverse.client.NovaClient.add_event", "modulename": "novauniverse.client", "qualname": "NovaClient.add_event", "type": "function", "doc": "<p>Registers event on client and starts running. Returns false if already added.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"n\">novauniverse</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">Event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "novauniverse.client.NovaClient.get_event_instance", "modulename": "novauniverse.client", "qualname": "NovaClient.get_event_instance", "type": "function", "doc": "<p>Gets the active instance of this event from the registered events pool in <code>NovaClient</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">novauniverse</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">Event</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">novauniverse</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">Event</span>:</span></span>", "funcdef": "def"}, {"fullname": "novauniverse.client.NovaClient.on_event", "modulename": "novauniverse.client", "qualname": "NovaClient.on_event", "type": "function", "doc": "<p>Decorator that allows you to run a function when an event occur in NovaUniverse.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"n\">novauniverse</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">Events</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "novauniverse.client.NovaClient.start", "modulename": "novauniverse.client", "qualname": "NovaClient.start", "type": "function", "doc": "<p>Runs client and starts listening to events.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">NoReturn</span>:</span></span>", "funcdef": "def"}, {"fullname": "novauniverse.client.NovaClient.stop", "modulename": "novauniverse.client", "qualname": "NovaClient.stop", "type": "function", "doc": "<p>Stops the client from running. \ud83d\ude0fIf you can even get to this method.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "novauniverse.errors", "modulename": "novauniverse.errors", "type": "module", "doc": "<p></p>\n"}, {"fullname": "novauniverse.errors.ErrorType", "modulename": "novauniverse.errors", "qualname": "ErrorType", "type": "class", "doc": "<p>A enum class of error types. These error types can be passed to the NovaError exception class.</p>\n", "bases": "enum.Enum"}, {"fullname": "novauniverse.errors.ErrorType.ERROR", "modulename": "novauniverse.errors", "qualname": "ErrorType.ERROR", "type": "variable", "doc": "<p></p>\n", "default_value": " = &lt;ErrorType.ERROR: 1&gt;"}, {"fullname": "novauniverse.errors.NovaError", "modulename": "novauniverse.errors", "qualname": "NovaError", "type": "class", "doc": "<p>The base class of all NovaUniverse.py errors.</p>\n", "bases": "builtins.Exception"}, {"fullname": "novauniverse.errors.NovaError.__init__", "modulename": "novauniverse.errors", "qualname": "NovaError.__init__", "type": "function", "doc": "<p>Raises this as a NovaUniverse.py exception.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"nb\">type</span><span class=\"p\">:</span> <span class=\"n\">novauniverse</span><span class=\"o\">.</span><span class=\"n\">errors</span><span class=\"o\">.</span><span class=\"n\">ErrorType</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span>)</span>"}, {"fullname": "novauniverse.events", "modulename": "novauniverse.events", "type": "module", "doc": "<p></p>\n"}, {"fullname": "novauniverse.events.EventInfo", "modulename": "novauniverse.events", "qualname": "EventInfo", "type": "class", "doc": "<p>Details about a event.</p>\n"}, {"fullname": "novauniverse.events.EventInfo.__init__", "modulename": "novauniverse.events", "qualname": "EventInfo.__init__", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">code_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "novauniverse.events.Event", "modulename": "novauniverse.events", "qualname": "Event", "type": "class", "doc": "<p>A base class for all NovaUniverse.py events.</p>\n", "bases": "abc.ABC"}, {"fullname": "novauniverse.events.Event.code_name", "modulename": "novauniverse.events", "qualname": "Event.code_name", "type": "variable", "doc": "<p>Returns code name of event.</p>\n", "annotation": ": str"}, {"fullname": "novauniverse.events.Event.loop", "modulename": "novauniverse.events", "qualname": "Event.loop", "type": "function", "doc": "<p>This method is called each <code>NovaClient</code> \ud83d\udc96heartbeat if the event is in use.</p>\n\n<hr />\n\n<p>Returning <code>True</code> indicates to <code>NovaClient</code> that the data has changed and it can trigger the event.</p>\n\n<p>Returning <code>False</code> indicates to <code>NovaClient</code> that the data has not changed and it shouldn't trigger the event.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "novauniverse.events.Event.trigger_event", "modulename": "novauniverse.events", "qualname": "Event.trigger_event", "type": "function", "doc": "<p>This method is ran when <code>NovaClient</code> gets an indication that the data has changed from <code>Event.loop</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "novauniverse.events.Event.add_function", "modulename": "novauniverse.events", "qualname": "Event.add_function", "type": "function", "doc": "<p>Used by <code>NovaClient</code> to add functions to events.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">func</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "novauniverse.events.Events", "modulename": "novauniverse.events", "qualname": "Events", "type": "class", "doc": "<p>An enum class of all available events. These can be used in <code>NovaClient().on_event()</code> function decorator.</p>\n", "bases": "enum.Enum"}, {"fullname": "novauniverse.events.Events.CLIENT_READY", "modulename": "novauniverse.events", "qualname": "Events.CLIENT_READY", "type": "variable", "doc": "<p>Triggers when NovaClient is ready.</p>\n", "default_value": " = &lt;Events.CLIENT_READY: &lt;class &#x27;novauniverse.events.client_ready.ClientReady&#x27;&gt;&gt;"}, {"fullname": "novauniverse.events.Events.PLAYER_JOIN", "modulename": "novauniverse.events", "qualname": "Events.PLAYER_JOIN", "type": "variable", "doc": "<p>Triggers each time a player joins any lobby on the Nova Universe network. Passes <code>NovaOnlinePlayer</code> object to function.</p>\n", "default_value": " = &lt;Events.PLAYER_JOIN: &lt;class &#x27;novauniverse.events.player_join.PlayerJoin&#x27;&gt;&gt;"}, {"fullname": "novauniverse.events.client_ready", "modulename": "novauniverse.events.client_ready", "type": "module", "doc": "<p></p>\n"}, {"fullname": "novauniverse.events.client_ready.ClientReady", "modulename": "novauniverse.events.client_ready", "qualname": "ClientReady", "type": "class", "doc": "<p>Triggers when NovaClient is ready.</p>\n", "bases": "novauniverse.events.Event"}, {"fullname": "novauniverse.events.client_ready.ClientReady.__init__", "modulename": "novauniverse.events.client_ready", "qualname": "ClientReady.__init__", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "novauniverse.events.client_ready.ClientReady.loop", "modulename": "novauniverse.events.client_ready", "qualname": "ClientReady.loop", "type": "function", "doc": "<p>This method is called each <code>NovaClient</code> \ud83d\udc96heartbeat if the event is in use.</p>\n\n<hr />\n\n<p>Returning <code>True</code> indicates to <code>NovaClient</code> that the data has changed and it can trigger the event.</p>\n\n<p>Returning <code>False</code> indicates to <code>NovaClient</code> that the data has not changed and it shouldn't trigger the event.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "novauniverse.events.client_ready.ClientReady.trigger_event", "modulename": "novauniverse.events.client_ready", "qualname": "ClientReady.trigger_event", "type": "function", "doc": "<p>This method is ran when <code>NovaClient</code> gets an indication that the data has changed from <code>Event.loop</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "novauniverse.events.player_join", "modulename": "novauniverse.events.player_join", "type": "module", "doc": "<p></p>\n"}, {"fullname": "novauniverse.events.player_join.PlayerJoin", "modulename": "novauniverse.events.player_join", "qualname": "PlayerJoin", "type": "class", "doc": "<p>Triggers each time a player joins any lobby on the Nova Universe network.</p>\n", "bases": "novauniverse.events.Event"}, {"fullname": "novauniverse.events.player_join.PlayerJoin.__init__", "modulename": "novauniverse.events.player_join", "qualname": "PlayerJoin.__init__", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "novauniverse.events.player_join.PlayerJoin.loop", "modulename": "novauniverse.events.player_join", "qualname": "PlayerJoin.loop", "type": "function", "doc": "<p>This method is called each <code>NovaClient</code> \ud83d\udc96heartbeat if the event is in use.</p>\n\n<hr />\n\n<p>Returning <code>True</code> indicates to <code>NovaClient</code> that the data has changed and it can trigger the event.</p>\n\n<p>Returning <code>False</code> indicates to <code>NovaClient</code> that the data has not changed and it shouldn't trigger the event.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "novauniverse.events.player_join.PlayerJoin.trigger_event", "modulename": "novauniverse.events.player_join", "qualname": "PlayerJoin.trigger_event", "type": "function", "doc": "<p>This method is ran when <code>NovaClient</code> gets an indication that the data has changed from <code>Event.loop</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "novauniverse.info", "modulename": "novauniverse.info", "type": "module", "doc": "<p></p>\n"}, {"fullname": "novauniverse.info.LOGGER_NAME", "modulename": "novauniverse.info", "qualname": "LOGGER_NAME", "type": "variable", "doc": "<p>The name of the logger. You can use this to get the logger with <code>logging.getLogger()</code>.</p>\n", "default_value": " = &#x27;\\x1b[31mNovaUniverse.py\\x1b[0m&#x27;"}, {"fullname": "novauniverse.interfaces", "modulename": "novauniverse.interfaces", "type": "module", "doc": "<p></p>\n"}, {"fullname": "novauniverse.interfaces.Interface", "modulename": "novauniverse.interfaces", "qualname": "Interface", "type": "class", "doc": "<p>A base class for all NovaUniverse API endpoints.</p>\n"}, {"fullname": "novauniverse.interfaces.Interface.__init__", "modulename": "novauniverse.interfaces", "qualname": "Interface.__init__", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "novauniverse.interfaces.InterfaceObject", "modulename": "novauniverse.interfaces", "qualname": "InterfaceObject", "type": "class", "doc": "<p>Base class for objects in all NovaUniverse.py interfaces.</p>\n"}, {"fullname": "novauniverse.interfaces.InterfaceObject.__init__", "modulename": "novauniverse.interfaces", "qualname": "InterfaceObject.__init__", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">id_and_name</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">object_class</span><span class=\"p\">:</span> <span class=\"nb\">object</span>,</span><span class=\"param\">\t<span class=\"n\">properties_to_represent</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span></span>)</span>"}, {"fullname": "novauniverse.interfaces.InterfaceObject.id", "modulename": "novauniverse.interfaces", "qualname": "InterfaceObject.id", "type": "variable", "doc": "<p>Tries to return the id.</p>\n", "annotation": ": int | None"}, {"fullname": "novauniverse.interfaces.InterfaceObject.name", "modulename": "novauniverse.interfaces", "qualname": "InterfaceObject.name", "type": "variable", "doc": "<p>Tries to return the name.</p>\n", "annotation": ": str | None"}, {"fullname": "novauniverse.interfaces.SearchInterface", "modulename": "novauniverse.interfaces", "qualname": "SearchInterface", "type": "class", "doc": "<p>Adds searching to the basic interface class. Use this to add searching functionality to interfaces.</p>\n", "bases": "Interface"}, {"fullname": "novauniverse.interfaces.SearchInterface.__init__", "modulename": "novauniverse.interfaces", "qualname": "SearchInterface.__init__", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">interface_class</span><span class=\"p\">:</span> <span class=\"nb\">object</span>,</span><span class=\"param\">\t<span class=\"n\">supports</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">novauniverse</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"o\">.</span><span class=\"n\">SearchBy</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "novauniverse.interfaces.SearchInterface.find", "modulename": "novauniverse.interfaces", "qualname": "SearchInterface.find", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">search_class</span><span class=\"p\">:</span> <span class=\"n\">novauniverse</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"o\">.</span><span class=\"n\">Search</span>,</span><span class=\"param\">\t<span class=\"n\">object_list</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">novauniverse</span><span class=\"o\">.</span><span class=\"n\">interfaces</span><span class=\"o\">.</span><span class=\"n\">InterfaceObject</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">novauniverse</span><span class=\"o\">.</span><span class=\"n\">interfaces</span><span class=\"o\">.</span><span class=\"n\">InterfaceObject</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "novauniverse.interfaces.news", "modulename": "novauniverse.interfaces.news", "type": "module", "doc": "<p></p>\n"}, {"fullname": "novauniverse.interfaces.news.News", "modulename": "novauniverse.interfaces.news", "qualname": "News", "type": "class", "doc": "<p>The interface for NovaAPI's <code>/news</code> endpoint.\nAllows you to get latest, get all and search for \ud83d\udcf0newsletters.</p>\n", "bases": "novauniverse.interfaces.SearchInterface"}, {"fullname": "novauniverse.interfaces.news.News.__init__", "modulename": "novauniverse.interfaces.news", "qualname": "News.__init__", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "novauniverse.interfaces.news.News.find", "modulename": "novauniverse.interfaces.news", "qualname": "News.find", "type": "function", "doc": "<p>Find/Search for \ud83d\udcf0newsletters.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">search</span><span class=\"p\">:</span> <span class=\"n\">novauniverse</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"o\">.</span><span class=\"n\">Search</span></span><span class=\"return-annotation\">) -> <span class=\"n\">novauniverse</span><span class=\"o\">.</span><span class=\"n\">interfaces</span><span class=\"o\">.</span><span class=\"n\">news</span><span class=\"o\">.</span><span class=\"n\">newsletter</span><span class=\"o\">.</span><span class=\"n\">NewsLetter</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "novauniverse.interfaces.news.News.get_all", "modulename": "novauniverse.interfaces.news", "qualname": "News.get_all", "type": "function", "doc": "<p>Returns all \ud83d\udcf0newsletters from api in a list. Returns empty list if none.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">novauniverse</span><span class=\"o\">.</span><span class=\"n\">interfaces</span><span class=\"o\">.</span><span class=\"n\">news</span><span class=\"o\">.</span><span class=\"n\">newsletter</span><span class=\"o\">.</span><span class=\"n\">NewsLetter</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "novauniverse.interfaces.news.News.get_latest", "modulename": "novauniverse.interfaces.news", "qualname": "News.get_latest", "type": "function", "doc": "<p>Returns the latest \ud83d\udcf0newsletter from api. Returns None if not found.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">novauniverse</span><span class=\"o\">.</span><span class=\"n\">interfaces</span><span class=\"o\">.</span><span class=\"n\">news</span><span class=\"o\">.</span><span class=\"n\">newsletter</span><span class=\"o\">.</span><span class=\"n\">NewsLetter</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "novauniverse.interfaces.news.author", "modulename": "novauniverse.interfaces.news.author", "type": "module", "doc": "<p></p>\n"}, {"fullname": "novauniverse.interfaces.news.author.NewsLetterAuthor", "modulename": "novauniverse.interfaces.news.author", "qualname": "NewsLetterAuthor", "type": "class", "doc": "<p></p>\n"}, {"fullname": "novauniverse.interfaces.news.author.NewsLetterAuthor.__init__", "modulename": "novauniverse.interfaces.news.author", "qualname": "NewsLetterAuthor.__init__", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">author_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span>)</span>"}, {"fullname": "novauniverse.interfaces.news.author.NewsLetterAuthor.display_name", "modulename": "novauniverse.interfaces.news.author", "qualname": "NewsLetterAuthor.display_name", "type": "variable", "doc": "<p>Display name of author.</p>\n", "annotation": ": str"}, {"fullname": "novauniverse.interfaces.news.author.NewsLetterAuthor.name", "modulename": "novauniverse.interfaces.news.author", "qualname": "NewsLetterAuthor.name", "type": "variable", "doc": "<p>Like the username of author I guess.</p>\n", "annotation": ": str"}, {"fullname": "novauniverse.interfaces.news.author.NewsLetterAuthor.username", "modulename": "novauniverse.interfaces.news.author", "qualname": "NewsLetterAuthor.username", "type": "variable", "doc": "<p>Like the username of author I guess.</p>\n", "annotation": ": str"}, {"fullname": "novauniverse.interfaces.news.author.NewsLetterAuthor.minecraft_username", "modulename": "novauniverse.interfaces.news.author", "qualname": "NewsLetterAuthor.minecraft_username", "type": "variable", "doc": "<p>Returns the minecraft username of the author.</p>\n", "annotation": ": str"}, {"fullname": "novauniverse.interfaces.news.author.NewsLetterAuthor.minecraft_uuid", "modulename": "novauniverse.interfaces.news.author", "qualname": "NewsLetterAuthor.minecraft_uuid", "type": "variable", "doc": "<p>Returns the minecraft uuid of the author.</p>\n", "annotation": ": str"}, {"fullname": "novauniverse.interfaces.news.newsletter", "modulename": "novauniverse.interfaces.news.newsletter", "type": "module", "doc": "<p></p>\n"}, {"fullname": "novauniverse.interfaces.news.newsletter.NewsLetter", "modulename": "novauniverse.interfaces.news.newsletter", "qualname": "NewsLetter", "type": "class", "doc": "<p>A newsletter object but .</p>\n", "bases": "novauniverse.interfaces.InterfaceObject"}, {"fullname": "novauniverse.interfaces.news.newsletter.NewsLetter.__init__", "modulename": "novauniverse.interfaces.news.newsletter", "qualname": "NewsLetter.__init__", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span>)</span>"}, {"fullname": "novauniverse.interfaces.news.newsletter.NewsLetter.id", "modulename": "novauniverse.interfaces.news.newsletter", "qualname": "NewsLetter.id", "type": "variable", "doc": "<p>Returns the id of the newsletter.</p>\n", "annotation": ": int"}, {"fullname": "novauniverse.interfaces.news.newsletter.NewsLetter.title", "modulename": "novauniverse.interfaces.news.newsletter", "qualname": "NewsLetter.title", "type": "variable", "doc": "<p>Returns title of newsletter.</p>\n", "annotation": ": str"}, {"fullname": "novauniverse.interfaces.news.newsletter.NewsLetter.timestamp", "modulename": "novauniverse.interfaces.news.newsletter", "qualname": "NewsLetter.timestamp", "type": "variable", "doc": "<p>Returns timestamp as python datetime object.</p>\n", "annotation": ": novauniverse.objects.timestamp.Timestamp"}, {"fullname": "novauniverse.interfaces.news.newsletter.NewsLetter.time_ago", "modulename": "novauniverse.interfaces.news.newsletter", "qualname": "NewsLetter.time_ago", "type": "variable", "doc": "<p>Returns how long ago the newsletter was posted in a easily readable manner. Like this --> <code>6 Months</code>. \nIf you want to customize this have a look at the <code>NewsLetter().timestamp.date</code> property.</p>\n\n<p>Returns <code>NewsLetter().timestamp</code> if not found.</p>\n", "annotation": ": str | novauniverse.objects.timestamp.Timestamp"}, {"fullname": "novauniverse.interfaces.news.newsletter.NewsLetter.full_url", "modulename": "novauniverse.interfaces.news.newsletter", "qualname": "NewsLetter.full_url", "type": "variable", "doc": "<p>Returns the full url to this newsletter.</p>\n", "annotation": ": str"}, {"fullname": "novauniverse.interfaces.news.newsletter.NewsLetter.type", "modulename": "novauniverse.interfaces.news.newsletter", "qualname": "NewsLetter.type", "type": "variable", "doc": "<p>Returns the newsletter type. UwU</p>\n", "annotation": ": novauniverse.interfaces.news.type.NewsLetterType"}, {"fullname": "novauniverse.interfaces.news.newsletter.NewsLetter.author", "modulename": "novauniverse.interfaces.news.newsletter", "qualname": "NewsLetter.author", "type": "variable", "doc": "<p>Returns the author of the newsletter.</p>\n", "annotation": ": novauniverse.interfaces.news.author.NewsLetterAuthor"}, {"fullname": "novauniverse.interfaces.news.newsletter.NewsLetter.html", "modulename": "novauniverse.interfaces.news.newsletter", "qualname": "NewsLetter.html", "type": "variable", "doc": "<p>Returns the html of this letter as a string.</p>\n", "annotation": ": str"}, {"fullname": "novauniverse.interfaces.news.newsletter.NewsLetter.raw", "modulename": "novauniverse.interfaces.news.newsletter", "qualname": "NewsLetter.raw", "type": "variable", "doc": "<p>Returns the raw bbcode as a string.</p>\n", "annotation": ": str"}, {"fullname": "novauniverse.interfaces.news.type", "modulename": "novauniverse.interfaces.news.type", "type": "module", "doc": "<p></p>\n"}, {"fullname": "novauniverse.interfaces.news.type.NewsLetterType", "modulename": "novauniverse.interfaces.news.type", "qualname": "NewsLetterType", "type": "class", "doc": "<p></p>\n"}, {"fullname": "novauniverse.interfaces.news.type.NewsLetterType.__init__", "modulename": "novauniverse.interfaces.news.type", "qualname": "NewsLetterType.__init__", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">type_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span>)</span>"}, {"fullname": "novauniverse.interfaces.news.type.NewsLetterType.title", "modulename": "novauniverse.interfaces.news.type", "qualname": "NewsLetterType.title", "type": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "novauniverse.interfaces.news.type.NewsLetterType.css_class", "modulename": "novauniverse.interfaces.news.type", "qualname": "NewsLetterType.css_class", "type": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "novauniverse.logging", "modulename": "novauniverse.logging", "type": "module", "doc": "<p></p>\n"}, {"fullname": "novauniverse.logging.NovaCustomFormatter", "modulename": "novauniverse.logging", "qualname": "NovaCustomFormatter", "type": "class", "doc": "<p>Formatter instances are used to convert a LogRecord to text.</p>\n\n<p>Formatters need to know how a LogRecord is constructed. They are\nresponsible for converting a LogRecord to (usually) a string which can\nbe interpreted by either a human or an external system. The base Formatter\nallows a formatting string to be specified. If none is supplied, the\nstyle-dependent default value, \"%(message)s\", \"{message}\", or\n\"${message}\", is used.</p>\n\n<p>The Formatter can be initialized with a format string which makes use of\nknowledge of the LogRecord attributes - e.g. the default value mentioned\nabove makes use of the fact that the user's message and arguments are pre-\nformatted into a LogRecord's message attribute. Currently, the useful\nattributes in a LogRecord are described by:</p>\n\n<p>%(name)s            Name of the logger (logging channel)\n%(levelno)s         Numeric logging level for the message (DEBUG, INFO,\n                    WARNING, ERROR, CRITICAL)\n%(levelname)s       Text logging level for the message (\"DEBUG\", \"INFO\",\n                    \"WARNING\", \"ERROR\", \"CRITICAL\")\n%(pathname)s        Full pathname of the source file where the logging\n                    call was issued (if available)\n%(filename)s        Filename portion of pathname\n%(module)s          Module (name portion of filename)\n%(lineno)d          Source line number where the logging call was issued\n                    (if available)\n%(funcName)s        Function name\n%(created)f         Time when the LogRecord was created (time.time()\n                    return value)\n%(asctime)s         Textual time when the LogRecord was created\n%(msecs)d           Millisecond portion of the creation time\n%(relativeCreated)d Time in milliseconds when the LogRecord was created,\n                    relative to the time the logging module was loaded\n                    (typically at application startup time)\n%(thread)d          Thread ID (if available)\n%(threadName)s      Thread name (if available)\n%(process)d         Process ID (if available)\n%(message)s         The result of record.getMessage(), computed just as\n                    the record is emitted</p>\n", "bases": "logging.Formatter"}, {"fullname": "novauniverse.logging.NovaCustomFormatter.pink_grey", "modulename": "novauniverse.logging", "qualname": "NovaCustomFormatter.pink_grey", "type": "variable", "doc": "<p></p>\n", "default_value": " = &#x27;\\x1b[38;5;139m&#x27;"}, {"fullname": "novauniverse.logging.NovaCustomFormatter.clay", "modulename": "novauniverse.logging", "qualname": "NovaCustomFormatter.clay", "type": "variable", "doc": "<p></p>\n", "default_value": " = &#x27;\\x1b[38;5;51m&#x27;"}, {"fullname": "novauniverse.logging.NovaCustomFormatter.grey", "modulename": "novauniverse.logging", "qualname": "NovaCustomFormatter.grey", "type": "variable", "doc": "<p></p>\n", "default_value": " = &#x27;\\x1b[38;20m&#x27;"}, {"fullname": "novauniverse.logging.NovaCustomFormatter.yellow", "modulename": "novauniverse.logging", "qualname": "NovaCustomFormatter.yellow", "type": "variable", "doc": "<p></p>\n", "default_value": " = &#x27;\\x1b[33;20m&#x27;"}, {"fullname": "novauniverse.logging.NovaCustomFormatter.red", "modulename": "novauniverse.logging", "qualname": "NovaCustomFormatter.red", "type": "variable", "doc": "<p></p>\n", "default_value": " = &#x27;\\x1b[31;20m&#x27;"}, {"fullname": "novauniverse.logging.NovaCustomFormatter.bold_red", "modulename": "novauniverse.logging", "qualname": "NovaCustomFormatter.bold_red", "type": "variable", "doc": "<p></p>\n", "default_value": " = &#x27;\\x1b[31;1m&#x27;"}, {"fullname": "novauniverse.logging.NovaCustomFormatter.reset", "modulename": "novauniverse.logging", "qualname": "NovaCustomFormatter.reset", "type": "variable", "doc": "<p></p>\n", "default_value": " = &#x27;\\x1b[0m&#x27;"}, {"fullname": "novauniverse.logging.NovaCustomFormatter.format", "modulename": "novauniverse.logging", "qualname": "NovaCustomFormatter.format", "type": "function", "doc": "<p>Format the specified record as text.</p>\n\n<p>The record's attribute dictionary is used as the operand to a\nstring formatting operation which yields the returned string.\nBefore formatting the dictionary, a couple of preparatory steps\nare carried out. The message attribute of the record is computed\nusing LogRecord.getMessage(). If the formatting string uses the\ntime (as determined by a call to usesTime(), formatTime() is\ncalled to format the event time. If there is exception information,\nit is formatted using formatException() and appended to the message.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">record</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "novauniverse.logging.NovaCustomFormatter.FORMATS", "modulename": "novauniverse.logging", "qualname": "NovaCustomFormatter.FORMATS", "type": "variable", "doc": "<p></p>\n", "default_value": " = {10: &#x27;\\x1b[38;5;139m[%(levelname)s] %(name)s - %(message)s\\x1b[0m&#x27;, 20: &#x27;\\x1b[38;5;51m[%(levelname)s] %(name)s - %(message)s\\x1b[0m&#x27;, 30: &#x27;\\x1b[33;20m[%(levelname)s] %(name)s - %(message)s\\x1b[0m&#x27;, 40: &#x27;\\x1b[31;20m[%(levelname)s] %(name)s - %(message)s\\x1b[0m&#x27;, 50: &#x27;\\x1b[31;1m[%(levelname)s] %(name)s - %(message)s\\x1b[0m&#x27;}"}, {"fullname": "novauniverse.logging.add_custom_handler", "modulename": "novauniverse.logging", "qualname": "add_custom_handler", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">logger</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span></span><span class=\"return-annotation\">) -> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span>:</span></span>", "funcdef": "def"}, {"fullname": "novauniverse.objects", "modulename": "novauniverse.objects", "type": "module", "doc": "<p></p>\n"}, {"fullname": "novauniverse.objects.nova_player", "modulename": "novauniverse.objects.nova_player", "type": "module", "doc": "<p></p>\n"}, {"fullname": "novauniverse.objects.nova_player.NovaBasicPlayer", "modulename": "novauniverse.objects.nova_player", "qualname": "NovaBasicPlayer", "type": "class", "doc": "<p>A very basic nova universe player class.</p>\n"}, {"fullname": "novauniverse.objects.nova_player.NovaBasicPlayer.__init__", "modulename": "novauniverse.objects.nova_player", "qualname": "NovaBasicPlayer.__init__", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">_NovaBasicPlayer__data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span>)</span>"}, {"fullname": "novauniverse.objects.nova_player.NovaBasicPlayer.uuid", "modulename": "novauniverse.objects.nova_player", "qualname": "NovaBasicPlayer.uuid", "type": "variable", "doc": "<p>Returns UUID of novauniverse player.</p>\n", "annotation": ": str"}, {"fullname": "novauniverse.objects.nova_player.NovaBasicPlayer.username", "modulename": "novauniverse.objects.nova_player", "qualname": "NovaBasicPlayer.username", "type": "variable", "doc": "<p>Returns username of novauniverse player.</p>\n", "annotation": ": str"}, {"fullname": "novauniverse.objects.timestamp", "modulename": "novauniverse.objects.timestamp", "type": "module", "doc": "<p></p>\n"}, {"fullname": "novauniverse.objects.timestamp.Timestamp", "modulename": "novauniverse.objects.timestamp", "qualname": "Timestamp", "type": "class", "doc": "<p>A NovaUniverse API timestamp object.</p>\n"}, {"fullname": "novauniverse.objects.timestamp.Timestamp.__init__", "modulename": "novauniverse.objects.timestamp", "qualname": "Timestamp.__init__", "type": "function", "doc": "<p>Returns timestamp as python datetime object and more.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">timestamp_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span>)</span>"}, {"fullname": "novauniverse.objects.timestamp.Timestamp.date", "modulename": "novauniverse.objects.timestamp", "qualname": "Timestamp.date", "type": "variable", "doc": "<p></p>\n", "annotation": ": datetime.datetime"}, {"fullname": "novauniverse.objects.timestamp.Timestamp.timezone_type", "modulename": "novauniverse.objects.timestamp", "qualname": "Timestamp.timezone_type", "type": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "novauniverse.objects.timestamp.Timestamp.timezone", "modulename": "novauniverse.objects.timestamp", "qualname": "Timestamp.timezone", "type": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "novauniverse.utils", "modulename": "novauniverse.utils", "type": "module", "doc": "<p></p>\n"}, {"fullname": "novauniverse.utils.search", "modulename": "novauniverse.utils.search", "type": "module", "doc": "<p></p>\n"}, {"fullname": "novauniverse.utils.search.SearchBy", "modulename": "novauniverse.utils.search", "qualname": "SearchBy", "type": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, {"fullname": "novauniverse.utils.search.SearchBy.id", "modulename": "novauniverse.utils.search", "qualname": "SearchBy.id", "type": "variable", "doc": "<p></p>\n", "default_value": " = &lt;SearchBy.id: 1&gt;"}, {"fullname": "novauniverse.utils.search.SearchBy.name_", "modulename": "novauniverse.utils.search", "qualname": "SearchBy.name_", "type": "variable", "doc": "<p></p>\n", "default_value": " = &lt;SearchBy.name_: 2&gt;"}, {"fullname": "novauniverse.utils.search.SearchGotNoArgs", "modulename": "novauniverse.utils.search", "qualname": "SearchGotNoArgs", "type": "class", "doc": "<p>The base class of all NovaUniverse.py errors.</p>\n", "bases": "novauniverse.errors.NovaError"}, {"fullname": "novauniverse.utils.search.SearchGotNoArgs.__init__", "modulename": "novauniverse.utils.search", "qualname": "SearchGotNoArgs.__init__", "type": "function", "doc": "<p>Raises this as a NovaUniverse.py exception.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "novauniverse.utils.search.SearchNotCompletelySupported", "modulename": "novauniverse.utils.search", "qualname": "SearchNotCompletelySupported", "type": "class", "doc": "<p>The base class of all NovaUniverse.py errors.</p>\n", "bases": "novauniverse.errors.NovaError"}, {"fullname": "novauniverse.utils.search.SearchNotCompletelySupported.__init__", "modulename": "novauniverse.utils.search", "qualname": "SearchNotCompletelySupported.__init__", "type": "function", "doc": "<p>Raises this as a NovaUniverse.py exception.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">searched_by</span>, </span><span class=\"param\"><span class=\"n\">interface</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span>)</span>"}, {"fullname": "novauniverse.utils.search.Search", "modulename": "novauniverse.utils.search", "qualname": "Search", "type": "class", "doc": "<p>Search by id or name if supported.</p>\n"}, {"fullname": "novauniverse.utils.search.Search.__init__", "modulename": "novauniverse.utils.search", "qualname": "Search.__init__", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "novauniverse.utils.search.Search.get_query", "modulename": "novauniverse.utils.search", "qualname": "Search.get_query", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "novauniverse.utils.search.Search.search_by", "modulename": "novauniverse.utils.search", "qualname": "Search.search_by", "type": "variable", "doc": "<p></p>\n", "annotation": ": novauniverse.utils.search.SearchBy | None"}, {"fullname": "novauniverse.utils.search.Search.not_supported", "modulename": "novauniverse.utils.search", "qualname": "Search.not_supported", "type": "function", "doc": "<p>Raises error to warn user this interface does not support searching by id/name.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">interface</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();